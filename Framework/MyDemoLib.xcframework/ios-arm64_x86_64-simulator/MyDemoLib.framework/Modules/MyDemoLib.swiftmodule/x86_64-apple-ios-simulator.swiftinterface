// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MyDemoLib
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Alamofire
import Foundation
import MBProgressHUD
@_exported import MyDemoLib
import SnapKit
import Swift
import Toast_Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension MyDemoLib.RequestContainer {
  @discardableResult
  public func responseDecodable<T>(queue: Dispatch.DispatchQueue? = nil, decoder: Foundation.JSONDecoder = JSONDecoder(), config: MyDemoLib.ACDMResponeConfig = ACDMResponeConfig(), completionHandler: @escaping (Alamofire.DataResponse<T>) -> Swift.Void) -> MyDemoLib.RequestContainer where T : Swift.Decodable
}
extension MyDemoLib.RequestContainer {
  @discardableResult
  public func responseACDMJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, config: MyDemoLib.ACDMResponeConfig = ACDMResponeConfig(), completionHandler: @escaping (Alamofire.DataResponse<Any>) -> Swift.Void) -> MyDemoLib.RequestContainer
}
public protocol ACDMDecrypt {
  func decrypt(data: MyDemoLib.ACDMResult) -> Alamofire.Result<Foundation.Data>
}
public struct ACDMResult : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ACDMBody<T> : Swift.Decodable where T : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ACDMNull : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ACDMResponeConfig : MyDemoLib.DecryptConfig {
  public init()
  public var isNeedDecrypt: Swift.Bool
}
public struct ACDMTarget : MyDemoLib.FGTarget, MyDemoLib.ACDMDecrypt {
  public let isDebug: Swift.Bool
  public let baseURL: Swift.String
  public let sinatureKey: Swift.String?
  public let requiredDic: [Swift.String : Any]
  public let optionalDic: [Swift.String : Any]
  public let commonErrorHandler: ((Swift.Int) -> Swift.Void)?
  public let p12Path: Swift.String?
  public let p12AccessKey: Swift.String?
  public init(isDebug: Swift.Bool = false, baseURL: Swift.String, sinatureKey: Swift.String? = nil, requiredDic: [Swift.String : Any] = [:], optionalDic: [Swift.String : Any] = [:], commonErrorHandler: ((Swift.Int) -> Swift.Void)? = nil, p12Path: Swift.String? = nil, p12AccessKey: Swift.String? = nil)
  public func accessToken(parameters: [Swift.String : Any]?) -> [Swift.String : Any]?
  public func decrypt(data: MyDemoLib.ACDMResult) -> Alamofire.Result<Foundation.Data>
}
@_hasMissingDesignatedInitializers public class FGCoreConfig {
  public static var shared: MyDemoLib.FGCoreConfig
  public var acdmTarget: MyDemoLib.ACDMTarget
  public var userProxyTarget: MyDemoLib.ACDMTarget
  @objc deinit
}
public protocol ProxyRequest : MyDemoLib.FGRequest {
}
extension MyDemoLib.ProxyRequest {
  public var method: MyDemoLib.HTTPMethod {
    get
  }
  public var baseURL: Swift.String {
    get
  }
  public var optionalParameter: [Swift.String : Any]? {
    get
  }
  public var target: any MyDemoLib.FGTarget {
    get
  }
}
public protocol BaseRequest : MyDemoLib.FGRequest {
}
extension MyDemoLib.BaseRequest {
  public var method: MyDemoLib.HTTPMethod {
    get
  }
  public var baseURL: Swift.String {
    get
  }
  public var optionalParameter: [Swift.String : Any]? {
    get
  }
  public var target: any MyDemoLib.FGTarget {
    get
  }
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showTips(_ tips: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showTips(_ tips: Swift.String, container: UIKit.UIView? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showAttributeTips(_ tips: Foundation.NSAttributedString, container: UIKit.UIView? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showTips(error: any Swift.Error)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showTips(error: any Swift.Error, container: UIKit.UIView? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideTips()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideTips(_ container: UIKit.UIView? = nil)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showHUD()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showHUD(_ container: UIKit.UIView? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideHUD()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideHUD(_ container: UIKit.UIView? = nil)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_isModal() -> Swift.Bool
}
extension Foundation.Bundle {
  public class func baseBundle() -> Foundation.Bundle
}
extension Swift.String {
  public var baseTablelocalized: Swift.String {
    get
  }
  public var baseImage: UIKit.UIImage? {
    get
  }
}
extension Swift.Double {
  public func convertToDate() -> Foundation.Date
}
extension Swift.KeyedDecodingContainer {
  public func decodeSafeIfPresent(_ type: Swift.String.Type, forKey key: K) throws -> Swift.String?
  public func decodeSafeIfPresent(_ type: Swift.Int.Type, forKey key: K) throws -> Swift.Int?
  public func decodeSafeIfPresent(_ type: Swift.Float.Type, forKey key: K) throws -> Swift.Float?
  public func decodeSafeIfPresent(_ type: Swift.Bool.Type, forKey key: K) throws -> Swift.Bool?
  public func decodeSafeIfPresent(_ type: Swift.Double.Type, forKey key: K) throws -> Swift.Double?
  public func decodeSafeIfPresent(_ type: [Swift.Int].Type, forKey key: K) throws -> [Swift.Int]?
  public func decodeSafeIfPresent(_ type: [Swift.Double].Type, forKey key: K) throws -> [Swift.Double]?
  public func decodeSafeIfPresent(_ type: [Swift.String].Type, forKey key: K) throws -> [Swift.String]?
  public func decodeSafeIfPresent<T>(_ type: T.Type, forKey key: K) throws -> T? where T : Swift.Decodable
}
@objc @_inheritsConvenienceInitializers open class DGRunkeeperSwitchRoundedLayer : QuartzCore.CALayer {
  @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc @_Concurrency.MainActor @preconcurrency open class DGRunkeeperSwitch : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency open var titles: [Swift.String] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency open var selectedIndex: Swift.Int {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency open var selectedBackgroundInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor @preconcurrency open var selectedBackgroundColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor @preconcurrency open var titleColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor @preconcurrency open var selectedTitleColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency open var titleFont: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor @preconcurrency open var titleFontFamily: Swift.String
  @IBInspectable @objc @_Concurrency.MainActor @preconcurrency open var titleFontSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var animationDuration: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency open var animationSpringDamping: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var animationInitialSpringVelocity: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public init(titles: [Swift.String])
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency open func setSelectedIndex(_ selectedIndex: Swift.Int, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
}
extension MyDemoLib.DGRunkeeperSwitch : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class FGSessionManager {
  public static var timeoutIntervalForRequest: Swift.Double
  public static var timeoutIntervalForResource: Swift.Double
  public static let sharedManager: MyDemoLib.SessionManager
  @objc deinit
}
public func request(_ request: any MyDemoLib.FGRequest, plugins: [any MyDemoLib.FGPlugin] = [FGPlugin]()) -> MyDemoLib.RequestContainer
public func upload(_ request: any MyDemoLib.FGRequest, fileName: Swift.String, mimeType: Swift.String, plugins: [any MyDemoLib.FGPlugin] = [FGPlugin](), block: @escaping (_ result: Alamofire.Result<MyDemoLib.RequestContainer>) -> Swift.Void, progressBlock: ((_ progress: Foundation.Progress) -> Swift.Void)? = nil)
public protocol FGBaseTableViewModelDelegate : AnyObject {
  func cellFactoryCreateCell(cell: UIKit.UITableViewCell, atIndexPath indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class FGBaseTableViewModel : ObjectiveC.NSObject, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency weak open var delegate: (any MyDemoLib.FGBaseTableViewModelDelegate)?
  @_Concurrency.MainActor @preconcurrency open var cellModels: [any MyDemoLib.FGTableViewCellModelProtocol]
  @_Concurrency.MainActor @preconcurrency open var didSelectRow: ((Foundation.IndexPath, any MyDemoLib.FGTableViewCellModelProtocol) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func router(eventKey: Swift.String, userInfo: [Swift.String : Swift.AnyObject])
}
public protocol FGTableViewCellModelProtocol {
  var cellHeight: CoreFoundation.CGFloat? { get set }
  var reusableIdentifier: Swift.String? { get }
  var cellClass: any MyDemoLib.FGTableViewCellProtocol.Type { get }
  var xibBunlde: Foundation.Bundle? { get }
}
extension MyDemoLib.FGTableViewCellModelProtocol {
  public var xibBunlde: Foundation.Bundle? {
    get
  }
}
public protocol FGTableViewCellProtocol {
  init(reuseIdentifier identifier: Swift.String)
  func config(cellModel: any MyDemoLib.FGTableViewCellModelProtocol, atIndexPath indexPath: Foundation.IndexPath)
  static func cellHeight(cellModel: any MyDemoLib.FGTableViewCellModelProtocol) -> CoreFoundation.CGFloat
}
@_hasMissingDesignatedInitializers final public class FGCellFactory {
  public static func tableView(_ tableView: UIKit.UITableView, cellForCellModel cellModel: any MyDemoLib.FGTableViewCellModelProtocol, atIndexPath indexPath: Foundation.IndexPath) -> any MyDemoLib.FGTableViewCellProtocol
  public static func tableView(_ tableView: UIKit.UITableView, heightForCellModel cellModel: any MyDemoLib.FGTableViewCellModelProtocol) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class FGDatePickerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var date: Foundation.Date {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(mode: UIKit.UIDatePicker.Mode = .dateAndTime, frame: CoreFoundation.CGRect = .zero)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func setHeaderViewBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setCancelButtonText(_ text: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setCancelButtonFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor @preconcurrency public func setConfirmButtonTextColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setConfirmButtonText(_ text: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setConfirmButtonFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor @preconcurrency public func setConfirmButtonBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setConfirmButtonCornerRadius(_ cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setTitleFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor @preconcurrency public func setTitleTextColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setHeaderViewSeparatorLineIsHidden(_ isHidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setSelectedDate(_ date: Foundation.Date)
  @_Concurrency.MainActor @preconcurrency public func setMaximumDate(_ date: Foundation.Date = Date(timeInterval: 24*3600, since: Date()))
  @_Concurrency.MainActor @preconcurrency public func showDatePicker(inView containerView: UIKit.UIView, cancelBlock: (() -> Swift.Void)?, confirmBlock: @escaping ((Foundation.Date) -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency public func hide()
  @objc deinit
}
public enum FGError : Swift.Error {
  public enum DecryptErrorReason {
    case rsa
    case aes
    case unzip
    case trim
    public static func == (a: MyDemoLib.FGError.DecryptErrorReason, b: MyDemoLib.FGError.DecryptErrorReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DecodeErrorReason {
    case noData
    case acdmBody
    public static func == (a: MyDemoLib.FGError.DecodeErrorReason, b: MyDemoLib.FGError.DecodeErrorReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case decryptError(reason: MyDemoLib.FGError.DecryptErrorReason)
  case unzipError
  case decodeError(reason: MyDemoLib.FGError.DecodeErrorReason)
  case httpError
  case logicError
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class FGMouduleBlockView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public typealias HTTPMethod = Alamofire.HTTPMethod
public typealias SessionManager = Alamofire.SessionManager
public typealias DataResponse = Alamofire.DataResponse
public typealias Result = Alamofire.Result
public typealias HTTPHeaders = Alamofire.HTTPHeaders
public typealias DataRequest = Alamofire.DataRequest
public typealias Request = Alamofire.Request
public typealias DataResponseSerializer = Alamofire.DataResponseSerializer
public protocol NetWorkConfig {
  var isDebug: Swift.Bool { get }
  var baseURL: Swift.String { get }
  var sinatureKey: Swift.String? { get }
  var requiredDic: [Swift.String : Any] { get }
  var optionalDic: [Swift.String : Any] { get }
  var commonErrorHandler: ((_ errorCode: Swift.Int) -> Swift.Void)? { get }
  var p12Path: Swift.String? { get }
  var p12AccessKey: Swift.String? { get }
}
@objc public class FGNetworkConfig : ObjectiveC.NSObject, MyDemoLib.NetWorkConfig {
  @objc final public let isDebug: Swift.Bool
  @objc final public let baseURL: Swift.String
  @objc final public let sinatureKey: Swift.String?
  @objc final public let requiredDic: [Swift.String : Any]
  @objc final public let optionalDic: [Swift.String : Any]
  @objc final public let commonErrorHandler: ((Swift.Int) -> Swift.Void)?
  @objc final public let p12Path: Swift.String?
  @objc final public let p12AccessKey: Swift.String?
  @objc public init(isDebug: Swift.Bool, baseURL: Swift.String, sinatureKey: Swift.String?, requiredDic: [Swift.String : Any], optionalDic: [Swift.String : Any], commonErrorHandler: ((Swift.Int) -> Swift.Void)?, p12Path: Swift.String?, p12AccessKey: Swift.String?)
  @objc deinit
}
public protocol FGParameter {
  var baseURL: Swift.String { get }
  var routerURL: Swift.String { get }
  var requiredParameter: [Swift.String : Any]? { get }
  var optionalParameter: [Swift.String : Any]? { get }
  var method: MyDemoLib.HTTPMethod { get }
  var stubData: Foundation.Data? { get }
  var target: any MyDemoLib.FGTarget { get }
}
extension MyDemoLib.FGParameter {
  public var stubData: Foundation.Data? {
    get
  }
}
public protocol FGRequest : MyDemoLib.FGParameter {
  var isNeedToken: Swift.Bool { get }
  var isNeedLog: Swift.Bool { get }
}
extension MyDemoLib.FGRequest {
  public var isNeedToken: Swift.Bool {
    get
  }
  public var isNeedLog: Swift.Bool {
    get
  }
}
public struct RequestContainer : MyDemoLib.RequestContainerTrait {
  public let dataRequest: MyDemoLib.DataRequest
  public let target: any MyDemoLib.FGTarget
  public let plugins: [any MyDemoLib.FGPlugin]
}
public protocol RequestContainerTrait {
  var dataRequest: MyDemoLib.DataRequest { get }
  var target: any MyDemoLib.FGTarget { get }
  var plugins: [any MyDemoLib.FGPlugin] { get }
}
public protocol DecryptConfig {
  var isNeedDecrypt: Swift.Bool { get }
}
@objc(FGPlaceholderTextView) @_Concurrency.MainActor @preconcurrency public class FGPlaceholderTextViewSwift : UIKit.UITextView {
  @objc @_Concurrency.MainActor @preconcurrency public var placeholder: Swift.String {
    @objc get
    @objc set
  }
  @objc(placeholderTextColor) @_Concurrency.MainActor @preconcurrency public var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var placeholderFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var attributedPlaceholder: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, placeholder: Swift.String, color: UIKit.UIColor?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public protocol FGPlugin {
  func willSend(request: any MyDemoLib.FGRequest, dataRequest: MyDemoLib.DataRequest)
  func didReceive(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Alamofire.Result<Foundation.Data>?)
}
public struct LoggerPlugin : MyDemoLib.FGPlugin {
  public init()
  public func willSend(request: any MyDemoLib.FGRequest, dataRequest: MyDemoLib.DataRequest)
  public func didReceive(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Alamofire.Result<Foundation.Data>?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class FGProgressView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var progressTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var borderTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var showPluse: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setProgress(_ progress: CoreFoundation.CGFloat, animated: Swift.Bool)
  @objc deinit
}
@objc public enum TableOperation : Swift.Int {
  case refresh = 0
  case moreData = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ParameterEncoder {
  func accessToken(parameters: [Swift.String : Any]?) -> [Swift.String : Any]?
}
public protocol FGTarget : MyDemoLib.NetWorkConfig, MyDemoLib.ParameterEncoder {
  var headers: MyDemoLib.HTTPHeaders? { get }
  var acceptContentTypes: [Swift.String] { get }
  var requestTimeoutInterval: Swift.Int { get }
}
extension MyDemoLib.FGTarget {
  public var headers: [Swift.String : Swift.String]? {
    get
  }
  public var acceptContentTypes: [Swift.String] {
    get
  }
  public var requestTimeoutInterval: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class FGTools : ObjectiveC.NSObject {
  @objc public static func makeErrorToast(_ error: (any Swift.Error)?)
  @objc public static func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = 1.0)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FGViewFactory : ObjectiveC.NSObject {
  @objc public static func commitButton(withFrame rect: CoreFoundation.CGRect, title: Swift.String?) -> UIKit.UIButton
  @objc public static func nextImageView(withTintColor color: UIKit.UIColor?) -> UIKit.UIImageView
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class FGWKWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var webView: WebKit.WKWebView
  @_Concurrency.MainActor @preconcurrency convenience public init(urlStr: Swift.String, canGoBackOnFirstPage flag: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL, canGoBackOnFirstPage flag: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public init(urlRequest: Foundation.URLRequest?, script: WebKit.WKUserScript?, canGoBackOnFirstPage flag: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setProgressBar(progressTintColor: UIKit.UIColor, trackTintColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
}
extension MyDemoLib.FGWKWebViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension MyDemoLib.FGWKWebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension MyDemoLib.FGWKWebViewController : WebKit.WKUIDelegate {
}
public struct MenuVariables {
  public static let kMarginX: CoreFoundation.CGFloat
  public static let kMarginY: CoreFoundation.CGFloat
  public static let kMinMenuItemHeight: CoreFoundation.CGFloat
  public static let kMinMenuItemWidth: CoreFoundation.CGFloat
  public static let kFYArrowSize: CoreFoundation.CGFloat
  public static let kImageTitleSpace: CoreFoundation.CGFloat
  public typealias SelectedIndexBlock = (_ index: Swift.Int) -> Swift.Void
  public typealias DissmissedBlock = () -> Swift.Void
}
@_inheritsConvenienceInitializers @objc public class FYMenuItem : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var image: UIKit.UIImage?
  @objc public var textColor: UIKit.UIColor
  @objc public var textAlighment: UIKit.NSTextAlignment
  @objc public var isSelected: Swift.Bool
  @objc public var showGradientLine: Swift.Bool
  @objc public var showSelectImage: Swift.Bool
  @objc public var value: Swift.String
  @objc public var selectImage: UIKit.UIImage? {
    @objc get
  }
  @objc public var index: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public enum FYMenuViewArrowDirection {
  case none
  case up
  case down
  case left
  case right
  public static func == (a: MyDemoLib.FYMenuViewArrowDirection, b: MyDemoLib.FYMenuViewArrowDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class FYMenu : ObjectiveC.NSObject {
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor? {
    get
    set
  }
  @objc public static let standard: MyDemoLib.FYMenu
  @objc public static func showMenu(in view: UIKit.UIView, from rect: CoreFoundation.CGRect, menuItems: [MyDemoLib.FYMenuItem], selected: @escaping MyDemoLib.MenuVariables.SelectedIndexBlock, dismissed: @escaping MyDemoLib.MenuVariables.DissmissedBlock)
  public static func dissmissMenu()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class FYNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension MyDemoLib.FYNavigationController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public protocol ModelInitializProtocol {
  init(fromDictionary dictionary: [Swift.String : Any])
}
public protocol ModelTransformProtocol : MyDemoLib.ModelInitializProtocol {
  associatedtype ObjectType = Self
  static func model(fromResult result: Any) -> Self.ObjectType?
  static func modelArray(fromResult result: Any) -> [Self.ObjectType]
}
extension MyDemoLib.ModelTransformProtocol {
  public static func model(fromResult result: Any) -> Self?
  public static func modelArray(fromResult result: Any) -> [Self]
}
extension Swift.Dictionary where Key : Swift.ExpressibleByStringLiteral {
  public func int(forKey key: Key, defaultValue: Swift.Int = 0) -> Swift.Int
  public func double(forKey key: Key, defaultValue: Swift.Double = 0.0) -> Swift.Double
  public func bool(forKey key: Key, defaultValue: Swift.Bool = false) -> Swift.Bool
  public func string(forKey key: Key, defaultValue: Swift.String = "") -> Swift.String
  public func array<T>(forKey key: Key) -> [T]
  public func date(forKey key: Key, defaultValue: Foundation.Date? = nil) -> Foundation.Date?
  public func dateFormat(forKey key: Key, dateFormat: Foundation.DateFormatter, defaultValue: Swift.String = "--:--") -> Swift.String
  public func model<T>(forKey key: Key) -> T? where T : MyDemoLib.ModelInitializProtocol
  public func modelArray<T>(forKey key: Key) -> [T] where T : MyDemoLib.ModelInitializProtocol
}
@objc @_Concurrency.MainActor @preconcurrency public class PaddingLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public var padding: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(padding: UIKit.UIEdgeInsets = .zero, frame: CoreFoundation.CGRect = .zero)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
public protocol Reusable {
  static var reuseIdentifier: Swift.String { get }
}
extension MyDemoLib.Reusable {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
@objc public enum PresentationDirection : Swift.Int {
  case left
  case top
  case right
  case bottom
  case middle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class SlideInPresentationManager : ObjectiveC.NSObject {
  @objc final public var direction: MyDemoLib.PresentationDirection
  @objc final public var disableCompactHeight: Swift.Bool
  @objc final public var size: CoreFoundation.CGSize
  @objc final public var offset: CoreFoundation.CGPoint
  @objc final public var dismissed: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension MyDemoLib.SlideInPresentationManager : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor @preconcurrency @objc final public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
extension MyDemoLib.SlideInPresentationManager : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController, traitCollection: UIKit.UITraitCollection) -> UIKit.UIModalPresentationStyle
}
extension Foundation.NSString {
  @objc dynamic public func phoneNumberFormat() -> Foundation.NSString
  @objc dynamic public func isContainChineseString() -> Swift.Bool
}
extension Swift.String {
  public func phoneNumberFormat() -> Swift.String
  public var isContainsChineseCharacters: Swift.Bool {
    get
  }
  public func stringByTrimingWhitespace() -> Swift.String
}
extension Swift.String {
  public var containsEmoji: Swift.Bool {
    get
  }
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor @preconcurrency public class func alert(title: Swift.String?, message: Swift.String?, buttonTitles: [Swift.String], actionBlock: @escaping (_ index: Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public class func singleMenuAlert(title: Swift.String?, message: Swift.String?, buttonTitle: Swift.String, actionBlock: @escaping (_ index: Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public class func doubleMenuAlert(title: Swift.String?, message: Swift.String?, cancelButtonTitle: Swift.String, otherButtonTitle: Swift.String, actionBlock: @escaping (_ index: Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public class func actionSheet(title: Swift.String?, message: Swift.String?, cancelTitle: Swift.String?, otherButtonTitles: [Swift.String], actionBlock: @escaping (_ index: Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public class func actionSheet(title: Swift.String?, message: Swift.String?, cancelTitle: Swift.String?, destructiveTitle: Swift.String, otherButtonTitles: [Swift.String], actionBlock: @escaping (_ index: Swift.Int) -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_show()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_show(_ animated: Swift.Bool)
}
public enum UIButtonBorderSide {
  case top, bottom, left, right
  public static func == (a: MyDemoLib.UIButtonBorderSide, b: MyDemoLib.UIButtonBorderSide) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func addBorder(side: MyDemoLib.UIButtonBorderSide, color: UIKit.UIColor, width: CoreFoundation.CGFloat)
}
@objc public enum ButtonImagePosition : Swift.Int {
  case left
  case top
  case bottom
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func resizeImagePosition(poistion: MyDemoLib.ButtonImagePosition, space: CoreFoundation.CGFloat)
}
extension UIKit.UIColor {
  @objc convenience dynamic public init(hex rgb: Swift.Int)
  @objc convenience dynamic public init(hex rgb: Swift.Int, alpha: CoreFoundation.CGFloat)
  @objc convenience dynamic public init(hexString hex: Swift.String)
  @objc convenience dynamic public init(hexString hex: Swift.String, alpha: CoreFoundation.CGFloat)
}
extension UIKit.UINavigationBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_setTransparent()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_changeColor(_ color: UIKit.UIColor)
}
extension UIKit.UINavigationBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func apply(gradient colors: [UIKit.UIColor])
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func cleanGradient()
}
@objc public enum InfiniteScrollingState : Swift.Int {
  case stopped = 0
  case triggered = 1
  case loading = 2
  case all = 10
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class FGInfiniteScrollingView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var state: MyDemoLib.InfiniteScrollingState {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @_Concurrency.MainActor @preconcurrency public func setCustom(_ view: UIKit.UIView, for state: MyDemoLib.InfiniteScrollingState)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func startAnimating()
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnimating()
  @objc @_Concurrency.MainActor @preconcurrency public func endDataAnimating()
  @objc deinit
}
extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addInfiniteScrolling(actionHandler: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopInfiniteScrolling()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var infiniteScrollingView: MyDemoLib.FGInfiniteScrollingView {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var showsInfiniteScrolling: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc public enum PullToRefreshState : Swift.Int {
  case stopped
  case triggered
  case loading
  case all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class FGPullToRefreshView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var state: MyDemoLib.PullToRefreshState {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func startAnimating()
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnimating()
  @objc @_Concurrency.MainActor @preconcurrency public func endDataAnimating()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String?, for state: MyDemoLib.PullToRefreshState)
  @objc @_Concurrency.MainActor @preconcurrency public func setSubtitle(_ subtitle: Swift.String?, for state: MyDemoLib.PullToRefreshState)
  @objc @_Concurrency.MainActor @preconcurrency public func setCustomView(_ view: UIKit.UIView?, for state: MyDemoLib.PullToRefreshState)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc deinit
}
extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var pullToRefreshView: MyDemoLib.FGPullToRefreshView {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addPullToRefresh(actionHandler: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addPulltoRefresh(height: CoreFoundation.CGFloat, actionHandler: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func triggerPullToRefresh()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopRefreshing()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var showsPullToRefresh: Swift.Bool {
    @objc get
    @objc set
  }
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func removeAllArrangedSubviews()
}
extension UIKit.UITabBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showBadge(at itemIndex: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideBadge(at itemIndex: Swift.Int)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func register<T>(_: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func register<T>(_: T.Type) where T : UIKit.UITableViewHeaderFooterView
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func reloadRowsIfExsist(at indexPaths: [Foundation.IndexPath], with animation: UIKit.UITableView.RowAnimation)
  @_Concurrency.MainActor @preconcurrency public func reloadRowIfExsist(at indexPath: Foundation.IndexPath, with animation: UIKit.UITableView.RowAnimation)
}
extension UIKit.UITableViewCell : MyDemoLib.Reusable {
}
extension UIKit.UITableViewHeaderFooterView : MyDemoLib.Reusable {
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func rounderCorners(byRoundingCorners roundingCorners: UIKit.UIRectCorner, cornerRadius: CoreFoundation.CGFloat)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func fg_defaultBackBarButton() -> UIKit.UIButton
  @objc(fg_leftBarButtonWithString:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_leftBarButton(with string: Swift.String) -> UIKit.UIButton
  @objc(fg_leftBarButtonWithImage:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_leftBarButton(with image: UIKit.UIImage?) -> UIKit.UIButton
  @objc(fg_rightBarButtonWithString:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_rightBarButton(with string: Swift.String) -> UIKit.UIButton
  @objc(fg_rightBarButtonWithImage:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_rightBarButton(with image: UIKit.UIImage?) -> UIKit.UIButton
  @objc(fg_rightBarButtonsWithImages:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_rightBarButtons(with images: [UIKit.UIImage]) -> [UIKit.UIButton]
  @objc(fg_rightBarButtonsWithStrings:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_rightBarButtons(with strings: [Swift.String]) -> [UIKit.UIButton]
  @objc(fg_barButtonWithCustomView:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_barButton(with customView: UIKit.UIView)
  @objc(fg_barButtonWithCustomView:left:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_barButton(with customView: UIKit.UIView, left: Swift.Bool)
  @objc(fg_barButtonWithCustomViews:) @_Concurrency.MainActor @preconcurrency dynamic public func fg_barButton(with customViews: [UIKit.UIView])
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func presentSlideIn(_ viewController: UIKit.UIViewController, animated: Swift.Bool, direction: MyDemoLib.PresentationDirection, offset: CoreFoundation.CGPoint = .zero, completion: (() -> Swift.Void)?, dismissed: (() -> Swift.Void)?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func presentSlideIn(_ viewController: UIKit.UIViewController, direction: MyDemoLib.PresentationDirection, offset: CoreFoundation.CGPoint = .zero)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func dismissSlideInViewController(animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension MyDemoLib.FGBaseTableViewModel : Swift.Sendable {}
extension MyDemoLib.FGError.DecryptErrorReason : Swift.Equatable {}
extension MyDemoLib.FGError.DecryptErrorReason : Swift.Hashable {}
extension MyDemoLib.FGError.DecodeErrorReason : Swift.Equatable {}
extension MyDemoLib.FGError.DecodeErrorReason : Swift.Hashable {}
extension MyDemoLib.TableOperation : Swift.Equatable {}
extension MyDemoLib.TableOperation : Swift.Hashable {}
extension MyDemoLib.TableOperation : Swift.RawRepresentable {}
extension MyDemoLib.FYMenuViewArrowDirection : Swift.Equatable {}
extension MyDemoLib.FYMenuViewArrowDirection : Swift.Hashable {}
extension MyDemoLib.PresentationDirection : Swift.Equatable {}
extension MyDemoLib.PresentationDirection : Swift.Hashable {}
extension MyDemoLib.PresentationDirection : Swift.RawRepresentable {}
extension MyDemoLib.UIButtonBorderSide : Swift.Equatable {}
extension MyDemoLib.UIButtonBorderSide : Swift.Hashable {}
extension MyDemoLib.ButtonImagePosition : Swift.Equatable {}
extension MyDemoLib.ButtonImagePosition : Swift.Hashable {}
extension MyDemoLib.ButtonImagePosition : Swift.RawRepresentable {}
extension MyDemoLib.InfiniteScrollingState : Swift.Equatable {}
extension MyDemoLib.InfiniteScrollingState : Swift.Hashable {}
extension MyDemoLib.InfiniteScrollingState : Swift.RawRepresentable {}
extension MyDemoLib.PullToRefreshState : Swift.Equatable {}
extension MyDemoLib.PullToRefreshState : Swift.Hashable {}
extension MyDemoLib.PullToRefreshState : Swift.RawRepresentable {}
